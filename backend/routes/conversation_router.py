# ========== IMPORTS ==========
import os
import json
import uuid
from datetime import datetime
from typing import List, Dict, Optional, Any
from flask import Blueprint, request, jsonify
from tinydb import Query
from openai import OpenAI
import logging

# Import config v√† database
from config.config import Config
from database import db_manager

# Import function calling services
from services.function_calling_service import (
    get_tech_news, 
    read_data_file, 
    summarize_information, 
    function_tools
)

# Import TTS service
from services.tts_service import TTSService

# Import RAG service
from services.rag_service import rag_service

# ========== LOGGER SETUP ==========
logger = logging.getLogger(__name__)

# ========== BLUEPRINT SETUP ==========
conversation_bp = Blueprint('conversation', __name__)

# ========== DATABASE INITIALIZATION ==========
# S·ª≠ d·ª•ng database manager
conversations_db = db_manager.get_conversations_db()
messages_db = db_manager.get_messages_db()

# ========== TTS SERVICE INITIALIZATION ==========
tts_service = TTSService()

# ========== CLIENT INITIALIZATION ==========
try:
    client = OpenAI(
        base_url=Config.OPENAI_BASE_URL,
        api_key=Config.OPENAI_API_KEY
    ) if Config.OPENAI_API_KEY else None
except Exception as e:
    logger.error("Vui l√≤ng ƒë·∫£m b·∫£o c√°c bi·∫øn m√¥i tr∆∞·ªùng OPENAI_API_KEY, OPENAI_BASE_URL ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p.")
    client = None

# ========== CONVERSATION ROUTES ==========

@conversation_bp.route('/conversations', methods=['GET'])
def get_conversations():
    """L·∫•y danh s√°ch t·∫•t c·∫£ conversations"""
    try:
        conversations = conversations_db.all()
        
        # S·∫Øp x·∫øp conversations theo th·ªùi gian t·∫°o t·ª´ m·ªõi nh·∫•t ƒë·∫øn c≈© nh·∫•t
        conversations.sort(key=lambda x: x.get('created_at', ''), reverse=True)
        
        return jsonify({
            "success": True,
            "conversations": conversations
        })
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@conversation_bp.route('/conversations', methods=['POST'])
def create_conversation():
    """T·∫°o conversation m·ªõi"""
    try:
        data = request.get_json()
        conversation_id = str(uuid.uuid4())
        
        conversation = {
            "id": conversation_id,
            "title": data.get("title", f"Cu·ªôc tr√≤ chuy·ªán {datetime.now().strftime('%H:%M %d/%m')}"),
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat(),
            "message_count": 0
        }
        
        conversations_db.insert(conversation)
        
        return jsonify({
            "success": True,
            "conversation": conversation
        }), 201
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@conversation_bp.route('/conversations/<conversation_id>', methods=['DELETE'])
def delete_conversation(conversation_id):
    """X√≥a conversation v√† t·∫•t c·∫£ messages c·ªßa n√≥"""
    try:
        Conversation = Query()
        Message = Query()
        
        # X√≥a conversation
        conversations_db.remove(Conversation.id == conversation_id)
        
        # X√≥a t·∫•t c·∫£ messages c·ªßa conversation
        messages_db.remove(Message.conversation_id == conversation_id)
        
        return jsonify({
            "success": True,
            "message": "Conversation ƒë√£ ƒë∆∞·ª£c x√≥a"
        })
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@conversation_bp.route('/conversations/<conversation_id>', methods=['PUT'])
def update_conversation(conversation_id):
    """C·∫≠p nh·∫≠t th√¥ng tin conversation (title)"""
    try:
        data = request.get_json()
        new_title = data.get("title")
        
        if not new_title or new_title.strip() == "":
            return jsonify({
                "success": False,
                "error": "Title kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
            }), 400
        
        Conversation = Query()
        conversation = conversations_db.search(Conversation.id == conversation_id)
        
        if not conversation:
            return jsonify({
                "success": False,
                "error": "Conversation kh√¥ng t·ªìn t·∫°i"
            }), 404
        
        # C·∫≠p nh·∫≠t title v√† updated_at
        conversations_db.update(
            {
                "title": new_title.strip(),
                "updated_at": datetime.now().isoformat()
            },
            Conversation.id == conversation_id
        )
        
        # L·∫•y conversation ƒë√£ c·∫≠p nh·∫≠t
        updated_conversation = conversations_db.search(Conversation.id == conversation_id)[0]
        
        return jsonify({
            "success": True,
            "message": "Conversation title ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
            "conversation": updated_conversation
        })
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@conversation_bp.route('/conversations/<conversation_id>/messages', methods=['GET'])
def get_messages(conversation_id):
    """L·∫•y t·∫•t c·∫£ messages trong m·ªôt conversation"""
    try:
        Message = Query()
        messages = messages_db.search(Message.conversation_id == conversation_id)
        
        # S·∫Øp x·∫øp theo th·ªùi gian
        messages.sort(key=lambda x: x['timestamp'])
        
        return jsonify({
            "success": True,
            "messages": messages
        })
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@conversation_bp.route('/conversations/<conversation_id>/chat', methods=['POST'])
def chat(conversation_id):
    """G·ª≠i tin nh·∫Øn v√† nh·∫≠n ph·∫£n h·ªìi t·ª´ AI v·ªõi t√πy ch·ªçn RAG"""
    try:
        if not client:
            return jsonify({
                "success": False,
                "error": "OpenAI client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o"
            }), 500
        
        data = request.get_json()
        user_message = data.get("message", "")
        
        if not user_message:
            return jsonify({
                "success": False,
                "error": "Message kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
            }), 400
        
        # L∆∞u tin nh·∫Øn c·ªßa user
        user_msg = {
            "id": str(uuid.uuid4()),
            "conversation_id": conversation_id,
            "role": "user",
            "content": user_message,
            "timestamp": datetime.now().isoformat()
        }
        messages_db.insert(user_msg)
        
        # L·∫•y l·ªãch s·ª≠ conversation
        Message = Query()
        conversation_messages = messages_db.search(Message.conversation_id == conversation_id)
        conversation_messages.sort(key=lambda x: x['timestamp'])
        
        assistant_content = ""
        response_metadata = {}
        
        try:
            # Chu·∫©n b·ªã conversation history cho RAG
            rag_history = []

            for msg in conversation_messages[-10:]:  # L·∫•y 10 tin nh·∫Øn g·∫ßn nh·∫•t
                rag_history.append({
                    "role": msg["role"],
                    "content": msg["content"]
                })
            
            # G·ªçi RAG service
            rag_result = rag_service.chat_with_context(user_message, rag_history)
            
            if rag_result["success"]:
                assistant_content = rag_result["response"]
                response_metadata = {
                    "mode": "rag",
                    "context_used": rag_result.get("context_used", 0),
                    "context_snippets": rag_result.get("context_snippets", []),
                    "response_type": rag_result.get("response_type", "rag"),
                    "tokens_used": rag_result.get("tokens_used")
                }
                
                # Th√™m th√¥ng tin v·ªÅ vi·ªác s·ª≠ d·ª•ng RAG
                if rag_result.get("context_used", 0) > 0:
                    assistant_content = f"üß† ****D·ª±a tr√™n {rag_result['context_used']} t√†i li·ªáu tham kh·∫£o:\n\n{assistant_content}"
                else:
                    assistant_content = f"üß† ****Kh√¥ng t√¨m th·∫•y t√†i li·ªáu li√™n quan, tr·∫£ l·ªùi d·ª±a tr√™n ki·∫øn th·ª©c chung:\n\n{assistant_content}"
                    
            else:
                # Fallback to normal chat if RAG fails
                logger.warning(f"RAG failed: {rag_result.get('error', 'Unknown error')}, falling back to normal chat")
                use_rag = False
                response_metadata["rag_error"] = rag_result.get('error', 'Unknown error')
                response_metadata["fallback_to_normal"] = True
                
        except Exception as e:
            logger.error(f"RAG processing error: {str(e)}")
            use_rag = False
            response_metadata["rag_error"] = str(e)
            response_metadata["fallback_to_normal"] = True
        
        # L∆∞u tin nh·∫Øn c·ªßa assistant
        assistant_msg = {
            "id": str(uuid.uuid4()),
            "conversation_id": conversation_id,
            "role": "assistant",
            "content": assistant_content,
            "timestamp": datetime.now().isoformat(),
            "metadata": response_metadata  # L∆∞u metadata v·ªÅ c√°ch t·∫°o response
        }
        messages_db.insert(assistant_msg)
        
        # C·∫≠p nh·∫≠t conversation
        Conversation = Query()
        conversations_db.update(
            {
                "updated_at": datetime.now().isoformat(),
                "message_count": len(messages_db.search(Message.conversation_id == conversation_id))
            },
            Conversation.id == conversation_id
        )
        
        return jsonify({
            "success": True,
            "response": assistant_content,
            "user_message": user_msg,
            "assistant_message": assistant_msg,
            "metadata": response_metadata
        })
        
    except Exception as e:
        logger.error(f"L·ªói trong chat: {str(e)}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@conversation_bp.route('/messages/<message_id>/tts', methods=['POST'])
def text_to_speech_message(message_id):
    """Convert message content to speech"""
    try:
        # Ki·ªÉm tra TTS service c√≥ available kh√¥ng
        if not tts_service.is_available:
            return jsonify({
                "success": False,
                "error": "Text-to-Speech service kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng c√†i ƒë·∫∑t dependencies."
            }), 503
        
        # T√¨m message theo ID
        Message = Query()
        message = messages_db.search(Message.id == message_id)
        
        if not message:
            return jsonify({
                "success": False,
                "error": "Message kh√¥ng t·ªìn t·∫°i"
            }), 404
        
        message = message[0]
        message_content = message.get("content", "")
        
        if not message_content.strip():
            return jsonify({
                "success": False,
                "error": "Message kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ ƒë·ªçc"
            }), 400
        
        # L·∫•y th√¥ng tin t√πy ch·ªçn t·ª´ request (note: current TTS service doesn't support these yet)
        data = request.get_json() or {}
        # voice_speed = data.get("speed", 1.0)  # Future enhancement
        # language = data.get("language", "en")  # Future enhancement
        
        # X·ª≠ l√Ω n·ªôi dung tr∆∞·ªõc khi TTS (lo·∫°i b·ªè markdown, emoji, etc.)
        processed_content = _clean_text_for_tts(message_content)
        
        # Generate speech
        result = tts_service.text_to_speech(
            text=processed_content,
            output_filename=None
        )
        
        if result["success"]:
            return jsonify({
                "success": True,
                "message": "Text-to-Speech conversion th√†nh c√¥ng",
                "audio_file": result["filename"],
                "download_url": f"/api/tts/download/{result['filename']}",
                "duration": result.get("duration_seconds"),
                "file_size": result.get("file_size_bytes"),
                "message_info": {
                    "id": message["id"],
                    "role": message["role"],
                    "content_preview": processed_content[:100] + "..." if len(processed_content) > 100 else processed_content,
                    "timestamp": message["timestamp"]
                }
            })
        else:
            return jsonify({
                "success": False,
                "error": f"L·ªói TTS: {result['error']}"
            }), 500
            
    except Exception as e:
        logger.error(f"L·ªói trong text-to-speech: {str(e)}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@conversation_bp.route('/conversations/<conversation_id>/messages/tts', methods=['POST'])
def text_to_speech_conversation(conversation_id):
    """Convert to√†n b·ªô conversation th√†nh speech (ch·ªâ assistant messages)"""
    try:
        if not tts_service.is_available:
            return jsonify({
                "success": False,
                "error": "Text-to-Speech service kh√¥ng kh·∫£ d·ª•ng"
            }), 503
        
        # L·∫•y t·∫•t c·∫£ messages c·ªßa conversation
        Message = Query()
        messages = messages_db.search(Message.conversation_id == conversation_id)
        
        if not messages:
            return jsonify({
                "success": False,
                "error": "Conversation kh√¥ng c√≥ messages"
            }), 404
        
        # Ch·ªâ l·∫•y assistant messages v√† s·∫Øp x·∫øp theo th·ªùi gian
        assistant_messages = [msg for msg in messages if msg.get("role") == "assistant"]
        assistant_messages.sort(key=lambda x: x['timestamp'])
        
        if not assistant_messages:
            return jsonify({
                "success": False,
                "error": "Conversation kh√¥ng c√≥ AI responses ƒë·ªÉ ƒë·ªçc"
            }), 404
        
        # K·∫øt h·ª£p n·ªôi dung c√°c messages
        combined_content = "\n\n".join([
            f"Ph·∫£n h·ªìi {i+1}: {msg['content']}" 
            for i, msg in enumerate(assistant_messages)
        ])
        
        # L·∫•y th√¥ng tin t√πy ch·ªçn (note: current TTS service doesn't support these yet)
        data = request.get_json() or {}
        # voice_speed = data.get("speed", 1.0)  # Future enhancement
        # language = data.get("language", "en")  # Future enhancement
        
        # X·ª≠ l√Ω v√† generate speech
        processed_content = _clean_text_for_tts(combined_content)
        
        result = tts_service.text_to_speech(
            text=processed_content,
            output_filename=None
        )
        
        if result["success"]:
            return jsonify({
                "success": True,
                "message": "Conversion to√†n b·ªô conversation th√†nh c√¥ng",
                "audio_file": result["filename"],
                "download_url": f"/api/tts/download/{result['filename']}",
                "duration": result.get("duration_seconds"),
                "file_size": result.get("file_size_bytes"),
                "conversation_info": {
                    "id": conversation_id,
                    "messages_count": len(assistant_messages),
                    "content_preview": processed_content[:200] + "..." if len(processed_content) > 200 else processed_content
                }
            })
        else:
            return jsonify({
                "success": False,
                "error": f"L·ªói TTS: {result['error']}"
            }), 500
            
    except Exception as e:
        logger.error(f"L·ªói trong conversation TTS: {str(e)}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

def _clean_text_for_tts(text: str) -> str:
    """Clean text for better TTS output"""
    import re
    
    # Lo·∫°i b·ªè markdown formatting
    text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)  # Bold
    text = re.sub(r'\*(.*?)\*', r'\1', text)      # Italic  
    text = re.sub(r'`(.*?)`', r'\1', text)        # Code
    text = re.sub(r'#{1,6}\s*(.*)', r'\1', text)  # Headers
    
    # Lo·∫°i b·ªè emoji v√† special characters
    text = re.sub(r'[üîßüí°üéØüö´‚úÖ]', '', text)
    
    # Thay th·∫ø URLs
    text = re.sub(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', 'link', text)
    
    # Chu·∫©n h√≥a kho·∫£ng tr·∫Øng
    text = re.sub(r'\s+', ' ', text)
    text = text.strip()
    
    # Thay th·∫ø m·ªôt s·ªë k√Ω hi·ªáu ƒë·ªÉ ƒë·ªçc t·ª± nhi√™n h∆°n
    replacements = {
        '&': 'and',
        '@': 'at',
        '#': 'hashtag',
        '%': 'percent',
        '$': 'dollar',
        '!': '',
        '+': 'plus',
        '=': 'equals',
        '<': 'less than',
        '>': 'greater than',
        '‚Ä¢': '',
        '‚Üí': 'to',
        '‚Üê': 'from'
    }
    
    for symbol, replacement in replacements.items():
        text = text.replace(symbol, replacement)
    
    return text