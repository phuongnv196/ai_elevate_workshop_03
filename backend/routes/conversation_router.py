# ========== IMPORTS ==========
import os
import json
import uuid
from datetime import datetime
from typing import List, Dict, Optional, Any
from flask import Blueprint, request, jsonify
from tinydb import Query
from openai import OpenAI
import logging

# Import config v√† database
from config import Config
from database import db_manager

# Import function calling services
from services.function_calling_service import (
    get_tech_news, 
    read_data_file, 
    summarize_information, 
    function_tools
)

# ========== LOGGER SETUP ==========
logger = logging.getLogger(__name__)

# ========== BLUEPRINT SETUP ==========
conversation_bp = Blueprint('conversation', __name__)

# ========== DATABASE INITIALIZATION ==========
# S·ª≠ d·ª•ng database manager
conversations_db = db_manager.get_conversations_db()
messages_db = db_manager.get_messages_db()

# ========== CLIENT INITIALIZATION ==========
try:
    client = OpenAI(
        base_url=Config.OPENAI_BASE_URL,
        api_key=Config.OPENAI_API_KEY
    ) if Config.OPENAI_API_KEY else None
except Exception as e:
    logger.error("Vui l√≤ng ƒë·∫£m b·∫£o c√°c bi·∫øn m√¥i tr∆∞·ªùng OPENAI_API_KEY, OPENAI_BASE_URL ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p.")
    client = None

# ========== CONVERSATION ROUTES ==========

@conversation_bp.route('/conversations', methods=['GET'])
def get_conversations():
    """L·∫•y danh s√°ch t·∫•t c·∫£ conversations"""
    try:
        conversations = conversations_db.all()
        
        # S·∫Øp x·∫øp conversations theo th·ªùi gian t·∫°o t·ª´ m·ªõi nh·∫•t ƒë·∫øn c≈© nh·∫•t
        conversations.sort(key=lambda x: x.get('created_at', ''), reverse=True)
        
        return jsonify({
            "success": True,
            "conversations": conversations
        })
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@conversation_bp.route('/conversations', methods=['POST'])
def create_conversation():
    """T·∫°o conversation m·ªõi"""
    try:
        data = request.get_json()
        conversation_id = str(uuid.uuid4())
        
        conversation = {
            "id": conversation_id,
            "title": data.get("title", f"Cu·ªôc tr√≤ chuy·ªán {datetime.now().strftime('%H:%M %d/%m')}"),
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat(),
            "message_count": 0
        }
        
        conversations_db.insert(conversation)
        
        return jsonify({
            "success": True,
            "conversation": conversation
        }), 201
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@conversation_bp.route('/conversations/<conversation_id>', methods=['DELETE'])
def delete_conversation(conversation_id):
    """X√≥a conversation v√† t·∫•t c·∫£ messages c·ªßa n√≥"""
    try:
        Conversation = Query()
        Message = Query()
        
        # X√≥a conversation
        conversations_db.remove(Conversation.id == conversation_id)
        
        # X√≥a t·∫•t c·∫£ messages c·ªßa conversation
        messages_db.remove(Message.conversation_id == conversation_id)
        
        return jsonify({
            "success": True,
            "message": "Conversation ƒë√£ ƒë∆∞·ª£c x√≥a"
        })
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@conversation_bp.route('/conversations/<conversation_id>', methods=['PUT'])
def update_conversation(conversation_id):
    """C·∫≠p nh·∫≠t th√¥ng tin conversation (title)"""
    try:
        data = request.get_json()
        new_title = data.get("title")
        
        if not new_title or new_title.strip() == "":
            return jsonify({
                "success": False,
                "error": "Title kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
            }), 400
        
        Conversation = Query()
        conversation = conversations_db.search(Conversation.id == conversation_id)
        
        if not conversation:
            return jsonify({
                "success": False,
                "error": "Conversation kh√¥ng t·ªìn t·∫°i"
            }), 404
        
        # C·∫≠p nh·∫≠t title v√† updated_at
        conversations_db.update(
            {
                "title": new_title.strip(),
                "updated_at": datetime.now().isoformat()
            },
            Conversation.id == conversation_id
        )
        
        # L·∫•y conversation ƒë√£ c·∫≠p nh·∫≠t
        updated_conversation = conversations_db.search(Conversation.id == conversation_id)[0]
        
        return jsonify({
            "success": True,
            "message": "Conversation title ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
            "conversation": updated_conversation
        })
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@conversation_bp.route('/conversations/<conversation_id>/messages', methods=['GET'])
def get_messages(conversation_id):
    """L·∫•y t·∫•t c·∫£ messages trong m·ªôt conversation"""
    try:
        Message = Query()
        messages = messages_db.search(Message.conversation_id == conversation_id)
        
        # S·∫Øp x·∫øp theo th·ªùi gian
        messages.sort(key=lambda x: x['timestamp'])
        
        return jsonify({
            "success": True,
            "messages": messages
        })
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@conversation_bp.route('/conversations/<conversation_id>/chat', methods=['POST'])
def chat(conversation_id):
    """G·ª≠i tin nh·∫Øn v√† nh·∫≠n ph·∫£n h·ªìi t·ª´ AI"""
    try:
        if not client:
            return jsonify({
                "success": False,
                "error": "OpenAI client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o"
            }), 500
        
        data = request.get_json()
        user_message = data.get("message", "")
        
        if not user_message:
            return jsonify({
                "success": False,
                "error": "Message kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
            }), 400
        
        # L∆∞u tin nh·∫Øn c·ªßa user
        user_msg = {
            "id": str(uuid.uuid4()),
            "conversation_id": conversation_id,
            "role": "user",
            "content": user_message,
            "timestamp": datetime.now().isoformat()
        }
        messages_db.insert(user_msg)
        
        # L·∫•y l·ªãch s·ª≠ conversation
        Message = Query()
        conversation_messages = messages_db.search(Message.conversation_id == conversation_id)
        conversation_messages.sort(key=lambda x: x['timestamp'])
        
        # Chu·∫©n b·ªã messages cho OpenAI
        openai_messages = [
            {"role": "system", "content": """B·∫°n l√† m·ªôt AI Technical Support Assistant chuy√™n v·ªÅ c√¥ng ngh·ªá v√† k·ªπ thu·∫≠t. 

            üéØ **NHI·ªÜM V·ª§ CH√çNH:**
            1. Tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ c√¥ng ngh·ªá, l·∫≠p tr√¨nh, k·ªπ thu·∫≠t
            2. L·∫•y v√† ph√¢n t√≠ch tin t·ª©c c√¥ng ngh·ªá m·ªõi nh·∫•t
            3. ƒê·ªçc v√† ph√¢n t√≠ch file d·ªØ li·ªáu k·ªπ thu·∫≠t
            4. T√≥m t·∫Øt th√¥ng tin li√™n quan ƒë·∫øn technology
            
            üö´ **LO·∫†I TR·ª™ TH√îNG TIN KH√îNG LI√äN QUAN:**
            - Tin t·ª©c gi·∫£i tr√≠, th·ªÉ thao, ch√≠nh tr·ªã
            - Th√¥ng tin kh√¥ng c√≥ t√≠nh k·ªπ thu·∫≠t
            - N·ªôi dung kh√¥ng li√™n quan ƒë·∫øn technology, IT, khoa h·ªçc
            - Qu·∫£ng c√°o, marketing kh√¥ng c√≥ y·∫øu t·ªë tech
            
            ‚úÖ **CH·ªà T·∫¨P TRUNG V√ÄO:**
            - C√¥ng ngh·ªá th√¥ng tin (IT, Software, Hardware)
            - Khoa h·ªçc m√°y t√≠nh v√† AI
            - L·∫≠p tr√¨nh v√† ph√°t tri·ªÉn ph·∫ßn m·ªÅm
            - Cybersecurity v√† b·∫£o m·∫≠t
            - Cloud computing, DevOps
            - IoT, Blockchain, Data Science
            - Mobile development, Web development
            - Startup c√¥ng ngh·ªá v√† innovation
            
            Khi g·∫∑p c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn c√¥ng ngh·ªá, h√£y l·ªãch s·ª± chuy·ªÉn h∆∞·ªõng v·ªÅ ch·ªß ƒë·ªÅ technical."""}
        ]
        
        # Th√™m l·ªãch s·ª≠ conversation (gi·ªõi h·∫°n 10 tin nh·∫Øn g·∫ßn nh·∫•t)
        for msg in conversation_messages[-20:]:
            openai_messages.append({
                "role": msg["role"],
                "content": msg["content"]
            })
        
        # G·ªçi OpenAI API v·ªõi function calling
        response = client.chat.completions.create(
            model=Config.OPENAI_MODEL,
            messages=openai_messages,
            tools=function_tools,
            tool_choice="auto",
            max_tokens=Config.MAX_TOKENS,
            temperature=Config.TEMPERATURE
        )
        
        response_message = response.choices[0].message
        assistant_content = ""
        
        # X·ª≠ l√Ω function calling
        if response_message.tool_calls:
            assistant_content += "üîß ƒêang th·ª±c hi·ªán c√°c ch·ª©c nƒÉng ƒë∆∞·ª£c y√™u c·∫ßu...\n\n"
            
            for tool_call in response_message.tool_calls:
                function_name = tool_call.function.name
                function_args = json.loads(tool_call.function.arguments)
                
                # Th·ª±c hi·ªán function call
                if function_name == "get_tech_news":
                    result = get_tech_news(function_args.get("query", "technology"))
                elif function_name == "read_data_file":
                    result = read_data_file(function_args.get("file_path"))
                elif function_name == "summarize_information":
                    result = summarize_information(
                        function_args.get("text"),
                        function_args.get("summary_type", "general")
                    )
                else:
                    result = f"Function {function_name} kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£."
                
                assistant_content += result + "\n\n"
                
            # G·ªçi l·∫°i OpenAI ƒë·ªÉ c√≥ response t·ª± nhi√™n h∆°n
            openai_messages.append({"role": "assistant", "content": assistant_content})
            openai_messages.append({"role": "user", "content": "H√£y t√≥m t·∫Øt v√† gi·∫£i th√≠ch k·∫øt qu·∫£ tr√™n m·ªôt c√°ch ng·∫Øn g·ªçn."})
            
            final_response = client.chat.completions.create(
                model=Config.OPENAI_MODEL,
                messages=openai_messages,
                max_tokens=500,
                temperature=Config.TEMPERATURE
            )
            
            assistant_content += "üí° **T√≥m t·∫Øt:**\n" + final_response.choices[0].message.content
        else:
            assistant_content = response_message.content
        
        # L∆∞u tin nh·∫Øn c·ªßa assistant
        assistant_msg = {
            "id": str(uuid.uuid4()),
            "conversation_id": conversation_id,
            "role": "assistant",
            "content": assistant_content,
            "timestamp": datetime.now().isoformat()
        }
        messages_db.insert(assistant_msg)
        
        # C·∫≠p nh·∫≠t conversation
        Conversation = Query()
        conversations_db.update(
            {
                "updated_at": datetime.now().isoformat(),
                "message_count": len(messages_db.search(Message.conversation_id == conversation_id))
            },
            Conversation.id == conversation_id
        )
        
        return jsonify({
            "success": True,
            "response": assistant_content,
            "user_message": user_msg,
            "assistant_message": assistant_msg
        })
        
    except Exception as e:
        logger.error(f"L·ªói trong chat: {str(e)}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500